body{font-family:'Old Standard TT', serif;background-color:#f1e8e8}@media (max-width: 576px){.navbar .container{width:500px;max-width:100%}}#bigImage{position:relative;background:url("../imgs/bigImage.png") center center fixed;background-size:cover;color:#fff;text-transform:capitalize;font-size:3em}#bigImage .overlay{position:absolute;width:100%;height:100%;background-color:rgba(0,0,0,0.6)}#aboutUs .carousel-indicators li{height:50px;max-width:40px;-webkit-border-radius:0 50%;border-radius:0 50%;-webkit-transition:all 0.5s ease-in-out;transition:all 0.5s ease-in-out}#aboutUs .carousel-indicators li .triangle{position:absolute;top:-77px;left:-11px;border-left:50px solid transparent;border-right:50px solid transparent;border-top:80px solid transparent;width:0;height:0}#aboutUs .carousel-indicators li.active{background-color:#fff;-webkit-border-radius:50% 0;border-radius:50% 0}#aboutUs .carousel-indicators li.active .triangle{border-top:80px solid #fff}#aboutUs .carousel-item .carousel-words{margin-top:100px;margin-bottom:100px;padding:70px 25px 50px;background-color:#fff}#aboutUs .carousel-item .carousel-words h3{margin-bottom:30px;position:relative}#aboutUs .carousel-item .carousel-words h3::before{left:50%}#aboutUs .carousel-item .carousel-words h3::after{right:50%}#aboutUs .carousel-item .carousel-words h3::before,#aboutUs .carousel-item .carousel-words h3::after{position:absolute;content:'';top:30px;background-color:#d9534f;width:15%;height:2px}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
